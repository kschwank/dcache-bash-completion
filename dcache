dcache_domains() 
{
  $(dcache status|egrep -o "^\w+"|tail -n +2)
}

have dcache &&
_dcache()
{
  local cur prev

  COMPREPLY=()   # Array variable storing the possible completions.
  _get_comp_words_by_ref cur prev

  case $prev in
    dcache)
        COMPREPLY=( $( compgen -W 'alarm billing check-config condrestart database dump import kpwd ports pool restart services start status stop version' -- "$cur" ) )
        return 0
        ;;
    alarm)
        COMPREPLY=( $( compgen -W 'list send add modify remove' -- "$cur" ) )
        return 0
        ;;
    billing)
        COMPREPLY=( $( compgen -W '--format= --since= --until= -f=' -- "$cur" ) )
        return 0
        ;;
    condrestart)
        COMPREPLY=( $( compgen -W "$(dcache_domains())" -- "$cur" ) )
        return 0
        ;;
database)
COMPREPLY=( $( compgen -W 'ls update showUpdateSQL tag rollback rollbackToDate listLocks releaseLocks doc' -- "$cur" ) )
        return 0
        ;;
    dump)
COMPREPLY=(dcache $( compgen -W 'heap threads' -- "$cur" ) )
        return 0
        ;;
    import)
COMPREPLY=( $( compgen -W 'hostcert cacerts' -- "$cur" ) )
 dcache       return 0
        ;;
    pool)
COMPREPLY=( $( compgen -W 'convert create reconstruct ls yaml' -- "$cur" ) )
        return 0
        ;;
    restart)
        COMPREPLY=( $( compgen -W "$(dcache_domains())" -- "$cur" ) )
        return 0
        ;;
    start)
        COMPREPLY=( $( compgen -W "$(dcache_domains())" -- "$cur" ) )
        return 0
        ;;
    stop)
        COMPREPLY=( $( compgen -W "$(dcache_domains())" -- "$cur" ) )
        return 0
        ;;
    *)
        ;;
  esac
} &&
complete -F _dcache dcache

